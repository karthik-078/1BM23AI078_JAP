import java.util.ArrayList;
public class StackTest {
public static void main(String[] args) {
StackOperations stack;

// Using FixedStack
stack = new FixedStack(3); // interface reference
stack.push(10);
stack.push(20);
stack.push(30);
stack.push(40); // should show overflow
stack.display();
System.out.println("Popped: " + stack.pop());

// Using DynamicStack
stack = new DynamicStack(); // same interface, different object
stack.push(100);
stack.push(200);
stack.push(300);
stack.display();
System.out.println("Popped: " + stack.pop());
}
}




class DynamicStack implements StackOperations {
private ArrayList<Integer> stack;

public DynamicStack() {
stack = new ArrayList<>();
}

public void push(int value) {
stack.add(value);
System.out.println("Pushed: " + value);
}

public int pop() {
if (stack.isEmpty()) {
System.out.println("Stack Underflow!");
return -1;
} else {
return stack.remove(stack.size() - 1);
}
}

public void display() {
System.out.println("DynamicStack: " + stack);
}
}



class FixedStack implements StackOperations {
private int[] stack;
private int top;

public FixedStack(int size) {
stack = new int[size];
top = -1;
}

public void push(int value) {
if (top == stack.length - 1) {
System.out.println("Stack Overflow!");
} else {
stack[++top] = value;
System.out.println("Pushed: " + value);
}
}

public int pop() {
if (top == -1) {
System.out.println("Stack Underflow!");
return -1;
} else {
return stack[top--];
}
}

public void display() {
System.out.print("FixedStack: ");
for (int i = 0; i <= top; i++) {
System.out.print(stack[i] + " ");
}
System.out.println();
}
}



interface StackOperations {
void push(int value);
int pop();
void display();
}
